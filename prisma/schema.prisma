generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  SUPER_ADMIN
  ADMIN
  USER
  SELLER
}

enum GenderType {
  male
  female
  other
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  address   String
   role      RoleType   @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  gender    GenderType
  reviews   Review[]
  wishlist    Wishlist[]
 payment   Payment[]
 order     Order[]
 coupon    Coupon[]
 notification Notification[]
 shippingInfo ShippingAddress[]

  @@map("user")
}




model Product {
  id            String   @id @default(uuid())
  name          String
  slug          String?   @unique
  description   String?
  price         Float
  discountPrice Float?
  currency      String   @default("BDT")
  stock         Int      @default(0)
  sku           String?   @unique 
  brand         String?
  images        String[]
  thumbnail     String?
  categoryId    String
  rating        Float?   @default(0.0)
  reviewsCount  Int?     @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  category      Category @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  wishlist      Wishlist[]
  order         Order[]
  orderItem     OrderItem[]
  productVariant ProductVariant[]
  payment        Payment[]
  stockHistory   StockHistory[]

  @@index([categoryId])
  @@map("product")
}

model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String    @unique
  products Product[]

  @@map("category")
}

enum ChangeType {
ORDER
RETURN
RESTOCK
} 

model StockHistory {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  changeType  ChangeType  
  quantity    Int
  createdAt   DateTime @default(now())
  note        String?
  @@map("stockHistory")
  @@index([productId])
}


model Wishlist {
  id String @id @default(uuid())
  productId String
  product   Product  @relation( fields: [productId], references:[id])
  userId  String
  user    User       @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime   @updatedAt

   @@map("wishlist")
   @@index([userId])
   @@index([productId])
}

model Order {
  id          String  @id @default(uuid())
  productId   String
  product     Product  @relation( fields: [productId], references:[id])
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime   @updatedAt
  orderItem   OrderItem[]
  
  @@map("order")
  @@index([userId])
  @@index([productId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_item")
  @@index([orderId])
  @@index([productId])
}

model Coupon {
  id        String   @id @default(uuid())
  code      String   @unique
  discount  Float
  validFrom DateTime
  validTo   DateTime
  userId    String
  user      User  @relation(fields: [userId], references: [id])
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coupon")
  @@index([userId])
}

model ProductVariant {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  color     String?
  size      String?
  stock     Int      @default(0)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@map("productVariant")
 
}

 enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}
enum PaymentType {
  Bkash
  CashOnDelivery
  Bank
  Nagod
}

model Payment {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  productId String
  product   Product       @relation(fields: [productId], references: [id])
  amount    Float
  type      PaymentType
  paymentStatus    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("payment")
  @@index([ userId])
}
model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  userId    String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([productId])
  @@map("review")
}

model ShippingAddress {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  division    String
  district    String
  street      String
  phone       String
  postalCode  String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("shipping_address")
  @@index([userId])
}

enum NotificationType {
  ORDER
  PAYMENT
  PRODUCT
  COUPON
  SYSTEM
}

model Notification {
  id          String    @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  message     String
  type        NotificationType
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  relatedId   String?   // orderId, productId etc.
  
  @@index([userId])
  @@map("notification")
}






